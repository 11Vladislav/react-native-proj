{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport React, { useState } from \"react\";\nimport \"react-native\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport RegistrationScreen from \"./Screens/RegistrationScreen\";\nimport LoginScreen from \"./Screens/LoginScreen\";\nimport Home from \"./Screens/Home\";\nimport * as Font from \"expo-font\";\nimport AppLoading from 'expo-app-loading';\nvar loadFonts = function () {\n  var _ref = _asyncToGenerator(function* () {\n    yield Font.loadAsync({\n      \"Roboto-Regular\": require(\"./../assets/fonts/Roboto-Regular.ttf\"),\n      \"Roboto-Bold\": require(\"./../assets/fonts/Roboto-Bold.ttf\")\n    });\n  });\n  return function loadFonts() {\n    return _ref.apply(this, arguments);\n  };\n}();\nvar MainStack = createStackNavigator();\nimport { nominalTypeHack } from \"prop-types\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nexport default function App() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isReady = _useState2[0],\n    setIsReady = _useState2[1];\n  if (!isReady) {\n    return _jsx(AppLoading, {\n      startAsync: loadFonts,\n      onFinish: function onFinish() {\n        return setIsReady(true);\n      },\n      onError: console.warn\n    });\n  }\n  return _jsx(NavigationContainer, {\n    children: _jsxs(MainStack.Navigator, {\n      initialRouteName: \"Login\",\n      children: [_jsx(MainStack.Screen, {\n        options: {\n          headerShown: false\n        },\n        name: \"Registration\",\n        component: RegistrationScreen\n      }), _jsx(MainStack.Screen, {\n        options: {\n          headerShown: false\n        },\n        name: \"Login\",\n        component: LoginScreen\n      })]\n    })\n  });\n}","map":{"version":3,"names":["React","useState","NavigationContainer","createStackNavigator","RegistrationScreen","LoginScreen","Home","Font","AppLoading","loadFonts","loadAsync","require","MainStack","nominalTypeHack","App","isReady","setIsReady","console","warn","headerShown"],"sources":["C:/Users/vlad1/Documents/GitHub/react-native-proj/App.js"],"sourcesContent":["import React, {useState} from \"react\";\r\nimport {} from \"react-native\";\r\nimport { NavigationContainer } from \"@react-navigation/native\";\r\nimport { createStackNavigator } from \"@react-navigation/stack\";\r\nimport RegistrationScreen from \"./Screens/RegistrationScreen\";\r\nimport LoginScreen from \"./Screens/LoginScreen\";\r\nimport Home from \"./Screens/Home\";\r\nimport * as Font from \"expo-font\";\r\nimport AppLoading from 'expo-app-loading';\r\n\r\nconst loadFonts = async () => {\r\n  await Font.loadAsync({\r\n    \"Roboto-Regular\": require(\"./../assets/fonts/Roboto-Regular.ttf\"),\r\n    \"Roboto-Bold\": require(\"./../assets/fonts/Roboto-Bold.ttf\"),\r\n  });\r\n};\r\n\r\nconst MainStack = createStackNavigator();\r\nimport { nominalTypeHack } from \"prop-types\"; \r\n\r\nexport default function App() {\r\n  const [isReady, setIsReady] = useState(false)\r\n\r\n  if (!isReady) {\r\n    return <AppLoading startAsync={loadFonts}\r\n      onFinish={() =>\r\n      setIsReady(true)}\r\n      onError={console.warn}\r\n    />\r\n  }\r\n  return (\r\n    <NavigationContainer>\r\n      <MainStack.Navigator initialRouteName=\"Login\">\r\n        <MainStack.Screen \r\n          options={{headerShown: false}} \r\n          name=\"Registration\" \r\n          component={RegistrationScreen} />\r\n        <MainStack.Screen \r\n          options={{headerShown: false}} \r\n          name=\"Login\" \r\n          component={LoginScreen} />\r\n        {/* <MainStack.Screen\r\n          name=\"Home\"\r\n          component={Home}\r\n          options={{ title: \"Start screen\" }}\r\n        /> */}\r\n      </MainStack.Navigator>\r\n  </NavigationContainer>\r\n  );\r\n}\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AACrC,OAAe,cAAc;AAC7B,SAASC,mBAAmB,QAAQ,0BAA0B;AAC9D,SAASC,oBAAoB,QAAQ,yBAAyB;AAC9D,OAAOC,kBAAkB;AACzB,OAAOC,WAAW;AAClB,OAAOC,IAAI;AACX,OAAO,KAAKC,IAAI,MAAM,WAAW;AACjC,OAAOC,UAAU,MAAM,kBAAkB;AAEzC,IAAMC,SAAS;EAAA,6BAAG,aAAY;IAC5B,MAAMF,IAAI,CAACG,SAAS,CAAC;MACnB,gBAAgB,EAAEC,OAAO,wCAAwC;MACjE,aAAa,EAAEA,OAAO;IACxB,CAAC,CAAC;EACJ,CAAC;EAAA,gBALKF,SAAS;IAAA;EAAA;AAAA,GAKd;AAED,IAAMG,SAAS,GAAGT,oBAAoB,EAAE;AACxC,SAASU,eAAe,QAAQ,YAAY;AAAC;AAAA;AAE7C,eAAe,SAASC,GAAG,GAAG;EAC5B,gBAA8Bb,QAAQ,CAAC,KAAK,CAAC;IAAA;IAAtCc,OAAO;IAAEC,UAAU;EAE1B,IAAI,CAACD,OAAO,EAAE;IACZ,OAAO,KAAC,UAAU;MAAC,UAAU,EAAEN,SAAU;MACvC,QAAQ,EAAE;QAAA,OACVO,UAAU,CAAC,IAAI,CAAC;MAAA,CAAC;MACjB,OAAO,EAAEC,OAAO,CAACC;IAAK,EACtB;EACJ;EACA,OACE,KAAC,mBAAmB;IAAA,UAClB,MAAC,SAAS,CAAC,SAAS;MAAC,gBAAgB,EAAC,OAAO;MAAA,WAC3C,KAAC,SAAS,CAAC,MAAM;QACf,OAAO,EAAE;UAACC,WAAW,EAAE;QAAK,CAAE;QAC9B,IAAI,EAAC,cAAc;QACnB,SAAS,EAAEf;MAAmB,EAAG,EACnC,KAAC,SAAS,CAAC,MAAM;QACf,OAAO,EAAE;UAACe,WAAW,EAAE;QAAK,CAAE;QAC9B,IAAI,EAAC,OAAO;QACZ,SAAS,EAAEd;MAAY,EAAG;IAAA;EAMR,EACJ;AAExB"},"metadata":{},"sourceType":"module"}