{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from \"react\";\nimport \"react-native\";\nimport { NavigationContainer } from \"@react-navigation/native\";\nimport { createStackNavigator } from \"@react-navigation/stack\";\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\nimport RegistrationScreen from \"./Screens/auth/RegistrationScreen\";\nimport LoginScreen from \"./Screens/auth/LoginScreen\";\nimport PostsScreen from \"./Screens/main/PostsScreen\";\nimport CreatePostsScreen from \"./Screens/main/CreatePostsScreen\";\nimport CommentsScreen from \"./Screens/main/CommentsScreen\";\nimport MapScreen from \"./Screens/main/MapScreen\";\nimport Home from \"./Screens/main/Home\";\nimport * as Font from \"expo-font\";\nimport AppLoading from 'expo-app-loading';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nimport { jsxs as _jsxs } from \"react/jsx-runtime\";\nvar loadFonts = function loadFonts() {\n  return _regeneratorRuntime.async(function loadFonts$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          _context.next = 2;\n          return _regeneratorRuntime.awrap(Font.loadAsync({\n            \"Roboto-Regular\": require(\"./assets/fonts/Roboto-Regular.ttf\"),\n            \"Roboto-Bold\": require(\"./assets/fonts/Roboto-Bold.ttf\")\n          }));\n        case 2:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n};\nvar MainStack = createStackNavigator();\nvar AuthStack = createStackNavigator();\nvar MainTab = createBottomTabNavigator();\nvar useRoute = function useRoute(isAuth) {\n  if (!isAuth) {\n    return;\n    _jsxs(AuthStack.Navigator, {\n      children: [_jsx(AuthStack.Screen, {\n        options: {\n          headerShown: false\n        },\n        name: \"Registration\",\n        component: RegistrationScreen\n      }), _jsx(AuthStack.Screen, {\n        options: {\n          headerShown: false\n        },\n        name: \"Login\",\n        component: LoginScreen\n      })]\n    });\n  }\n};\nexport default function App() {\n  var _useState = useState(false),\n    _useState2 = _slicedToArray(_useState, 2),\n    isReady = _useState2[0],\n    setIsReady = _useState2[1];\n  if (!isReady) {\n    return _jsx(AppLoading, {\n      startAsync: loadFonts,\n      onFinish: function onFinish() {\n        return setIsReady(true);\n      },\n      onError: console.warn\n    });\n  }\n  return _jsx(NavigationContainer, {\n    children: _jsxs(MainTab.Navigator, {\n      children: [_jsx(MainTab.Screen, {\n        options: {\n          headerShown: false\n        },\n        name: \"PostsScreen\",\n        component: PostsScreen\n      }), _jsx(MainTab.Screen, {\n        options: {\n          headerShown: false\n        },\n        name: \"CreatePostsScreen\",\n        component: CreatePostsScreen\n      }), _jsx(MainTab.Screen, {\n        options: {\n          headerShown: false\n        },\n        name: \"CommentsScreen\",\n        component: CommentsScreen\n      })]\n    })\n  });\n}","map":{"version":3,"names":["React","useState","NavigationContainer","createStackNavigator","createBottomTabNavigator","RegistrationScreen","LoginScreen","PostsScreen","CreatePostsScreen","CommentsScreen","MapScreen","Home","Font","AppLoading","loadFonts","loadAsync","require","MainStack","AuthStack","MainTab","useRoute","isAuth","headerShown","App","isReady","setIsReady","console","warn"],"sources":["C:/Users/vlad1/Documents/GitHub/react-native-proj/App.js"],"sourcesContent":["import React, {useState} from \"react\";\r\nimport {} from \"react-native\";\r\nimport { NavigationContainer } from \"@react-navigation/native\";\r\nimport { createStackNavigator } from \"@react-navigation/stack\";\r\nimport { createBottomTabNavigator } from \"@react-navigation/bottom-tabs\";\r\nimport RegistrationScreen from \"./Screens/auth/RegistrationScreen\";\r\nimport LoginScreen from \"./Screens/auth/LoginScreen\";\r\nimport PostsScreen from \"./Screens/main/PostsScreen\";\r\nimport CreatePostsScreen from \"./Screens/main/CreatePostsScreen\";\r\nimport CommentsScreen from \"./Screens/main/CommentsScreen\";\r\nimport MapScreen from \"./Screens/main/MapScreen\";\r\nimport Home from \"./Screens/main/Home\";\r\nimport * as Font from \"expo-font\";\r\nimport AppLoading from 'expo-app-loading';\r\n\r\nconst loadFonts = async () => {\r\n  await Font.loadAsync({\r\n    \"Roboto-Regular\": require(\"./assets/fonts/Roboto-Regular.ttf\"),\r\n    \"Roboto-Bold\": require(\"./assets/fonts/Roboto-Bold.ttf\"),\r\n  });\r\n};\r\n\r\nconst MainStack = createStackNavigator();\r\nconst AuthStack = createStackNavigator();\r\nconst MainTab = createBottomTabNavigator();\r\n\r\nconst useRoute = (isAuth) =>{\r\n  if(!isAuth){\r\n    return \r\n    <AuthStack.Navigator>\r\n    <AuthStack.Screen \r\n      options={{headerShown: false}} \r\n      name=\"Registration\" \r\n      component={RegistrationScreen} />\r\n    <AuthStack.Screen \r\n      options={{headerShown: false}} \r\n      name=\"Login\" \r\n      component={LoginScreen} />\r\n  </AuthStack.Navigator>\r\n  }\r\n}\r\n\r\nexport default function App() {\r\n  const [isReady, setIsReady] = useState(false)\r\n\r\n  if (!isReady) {\r\n    return <AppLoading startAsync={loadFonts}\r\n      onFinish={() =>\r\n      setIsReady(true)}\r\n      onError={console.warn}\r\n    />\r\n  }\r\n  return (\r\n    <NavigationContainer>\r\n      <MainTab.Navigator>\r\n        <MainTab.Screen options={{headerShown: false}} \r\n          name=\"PostsScreen\" \r\n          component={PostsScreen} />\r\n        <MainTab.Screen options={{headerShown: false}} \r\n          name=\"CreatePostsScreen\" \r\n          component={CreatePostsScreen} />\r\n        <MainTab.Screen options={{headerShown: false}} \r\n          name=\"CommentsScreen\" \r\n          component={CommentsScreen} />\r\n      </MainTab.Navigator>\r\n    </NavigationContainer>\r\n  );\r\n}\r\n\r\n\r\n//auth \r\n\r\n  //   <NavigationContainer>      \r\n\r\n  // </NavigationContainer>"],"mappings":";;AAAA,OAAOA,KAAK,IAAGC,QAAQ,QAAO,OAAO;AACrC,OAAe,cAAc;AAC7B,SAASC,mBAAmB,QAAQ,0BAA0B;AAC9D,SAASC,oBAAoB,QAAQ,yBAAyB;AAC9D,SAASC,wBAAwB,QAAQ,+BAA+B;AACxE,OAAOC,kBAAkB;AACzB,OAAOC,WAAW;AAClB,OAAOC,WAAW;AAClB,OAAOC,iBAAiB;AACxB,OAAOC,cAAc;AACrB,OAAOC,SAAS;AAChB,OAAOC,IAAI;AACX,OAAO,KAAKC,IAAI,MAAM,WAAW;AACjC,OAAOC,UAAU,MAAM,kBAAkB;AAAC;AAAA;AAE1C,IAAMC,SAAS,GAAG,SAAZA,SAAS;EAAA;IAAA;MAAA;QAAA;UAAA;UAAA,iCACPF,IAAI,CAACG,SAAS,CAAC;YACnB,gBAAgB,EAAEC,OAAO,qCAAqC;YAC9D,aAAa,EAAEA,OAAO;UACxB,CAAC,CAAC;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA,CACH;AAED,IAAMC,SAAS,GAAGd,oBAAoB,EAAE;AACxC,IAAMe,SAAS,GAAGf,oBAAoB,EAAE;AACxC,IAAMgB,OAAO,GAAGf,wBAAwB,EAAE;AAE1C,IAAMgB,QAAQ,GAAG,SAAXA,QAAQ,CAAIC,MAAM,EAAI;EAC1B,IAAG,CAACA,MAAM,EAAC;IACT;IACA,MAAC,SAAS,CAAC,SAAS;MAAA,WACpB,KAAC,SAAS,CAAC,MAAM;QACf,OAAO,EAAE;UAACC,WAAW,EAAE;QAAK,CAAE;QAC9B,IAAI,EAAC,cAAc;QACnB,SAAS,EAAEjB;MAAmB,EAAG,EACnC,KAAC,SAAS,CAAC,MAAM;QACf,OAAO,EAAE;UAACiB,WAAW,EAAE;QAAK,CAAE;QAC9B,IAAI,EAAC,OAAO;QACZ,SAAS,EAAEhB;MAAY,EAAG;IAAA,EACR;EACtB;AACF,CAAC;AAED,eAAe,SAASiB,GAAG,GAAG;EAC5B,gBAA8BtB,QAAQ,CAAC,KAAK,CAAC;IAAA;IAAtCuB,OAAO;IAAEC,UAAU;EAE1B,IAAI,CAACD,OAAO,EAAE;IACZ,OAAO,KAAC,UAAU;MAAC,UAAU,EAAEV,SAAU;MACvC,QAAQ,EAAE;QAAA,OACVW,UAAU,CAAC,IAAI,CAAC;MAAA,CAAC;MACjB,OAAO,EAAEC,OAAO,CAACC;IAAK,EACtB;EACJ;EACA,OACE,KAAC,mBAAmB;IAAA,UAClB,MAAC,OAAO,CAAC,SAAS;MAAA,WAChB,KAAC,OAAO,CAAC,MAAM;QAAC,OAAO,EAAE;UAACL,WAAW,EAAE;QAAK,CAAE;QAC5C,IAAI,EAAC,aAAa;QAClB,SAAS,EAAEf;MAAY,EAAG,EAC5B,KAAC,OAAO,CAAC,MAAM;QAAC,OAAO,EAAE;UAACe,WAAW,EAAE;QAAK,CAAE;QAC5C,IAAI,EAAC,mBAAmB;QACxB,SAAS,EAAEd;MAAkB,EAAG,EAClC,KAAC,OAAO,CAAC,MAAM;QAAC,OAAO,EAAE;UAACc,WAAW,EAAE;QAAK,CAAE;QAC5C,IAAI,EAAC,gBAAgB;QACrB,SAAS,EAAEb;MAAe,EAAG;IAAA;EACb,EACA;AAE1B"},"metadata":{},"sourceType":"module"}